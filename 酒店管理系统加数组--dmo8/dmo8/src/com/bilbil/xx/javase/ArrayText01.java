package com.bilbil.xx.javase;

public class ArrayText01 {
/*
 * Array
		1、Java语言中的数组是一种引用数据类型。不属于基本数据类型。数组的父类是object。
		2、数组实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合。）
		数组：字面意思是一组数据
		3、数组当中可以存储“基本数据类型”的数据，也可以存估“引用数据类型”的数据
		4、数组因为是引用类型，所以数组对象是堆内存当中。（数组是存储在 堆 当中的）
		5、数组当中如果存储的是“Java”对象的话，实际上存储的是对象的 引用（内存地址）
		6、数组一旦创建 在java中规定  长度不可变
		6、数组的分类： 一维数组 二维数组 三维数值  （一维使用多）
		7、所以的数组对象都具有  length 属性（java中）用来 获取数组中元素个数
		8、java中的数组要求数组中元素的类型统一。比如int类型数组只能存储int类型，Person类型数组只能存储Person类型
		9、数组在内存方面 存储的时候，数组中的元素内存地址（存储的每一个元素都是有规则的紧挨着排列的）是连续的
		10、数组中每一个元素 都是有下标的 下标以0开始，以1递增  最后一个元素的下标是 ： length  - 1
		
		优点：查询/查找/检索某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构。
			
	为什么检素效率高？
		第一：每一个元素的内存地址在空间存估上是连续的。
		第二：每一个元素类型相同，所以占用空间大小一样。
		第三：知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以
		通过一个数学表达式就可以计算出某个下标上元素的内存地址。适接通过内存地址定位元素，所以数组的检索效率是最高的。
		
	数组中存储100个元素，或者存储109万个元素，在元素查询/检案方面，效率是相同的
	因为数组中元素查找的时候不会一个一个找，是通过数学表达式计算出来的。（算出一个内存地址，查接定位的。）
	
		缺点：
		
		1、由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，效率较低因为 随机增删元素会涉及到后面元素统一向前或者向后位移的操作
		2、数组不能存估大数据量，为什么？
				因为很难在内存空间上找到一块特别大的连续的内存空间。
				
		注意：对于数组中最后一个元素的增删，是没有效率影响的。
		
		14、怎么声明/定义一个一维数组？
				语法格式：
					int[] arrayl
					double[] array2;
					boolean[] array3;
					String[] array4,
					Object[] array5;
			
		15、怎么韧始化一个一维数组呢？
			包括两种方式：静态初始化一维数组，动态初始化一维数组。
			静态初始化语法格式：
				int[] array = (100,2100,300,55);
				
			动态初始化语法格式：
				int[] array =new int[5]；//这里的5表示数组的元素个数。
										//初始化一个5个长度的int类型数组，每个元素默认值为0
				String[] names =newString[6]；//初始化6个长度的string类型数组，每个元素默认值null




 * 
 */
	public static void main(String[] args) {
		//声明一个 int类型的数组、使用静态初始化的方式  
		int[] a1 = {1,10,2,20,3,30};
		
		//int a1[] ={1,10,2,20,3,30};//c++方式
		
		//所有的数组对象  都有length属性
		System.out.println("数组的元素个数  "+a1.length);
		//数组中每个元素都有下标
		//取a1数组的第一个元素
		System.out.println("第一个元素  "+ a1[0]);
		
		//取a1数组最后一个元素
		System.out.println("最后一个元素"+a1[a1.length-1]);
		
		System.out.println("修改----------------------------");
		//修改 第一个元素为111
		a1[0]  = 111;
		//修改 最后一个元素为0
		a1[a1.length -1] =0;
		
		System.out.println("第一个元素 "+a1[0]);
		System.out.println("最后一个元素 "+a1[a1.length-1]);
		
		//一堆数组怎么遍历
		for(int i = 0;i <a1.length;i++) {
			System.out.println(a1[i]);//i是从0到6 是下标
			
		}
		//从最后一个元素遍历到第一个元素
		for(int i=a1.length-1;i>=0;i--) {
			System.out.println(a1[i]);
		}
		
		//下标为6表示第7个元素，第7个元素没有，下标越界了。会出现什么异常呢？
		//System.out.println(a1[6]);//ArrayIndexOutofBoundsException（比较著名的异常。）


	}

}
